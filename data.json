{
    "project": {
        "name": "CloudKid States API",
        "description": "CloudKid States API: a library providing base classes for making various gamestates",
        "version": "1.1.0",
        "logo": "cloudkid.png"
    },
    "files": {
        "src/BaseState.js": {
            "name": "src/BaseState.js",
            "modules": {},
            "classes": {
                "cloudkid.BaseState": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/StateEvent.js": {
            "name": "src/StateEvent.js",
            "modules": {},
            "classes": {
                "cloudkid.StateEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/StateManager.js": {
            "name": "src/StateManager.js",
            "modules": {},
            "classes": {
                "cloudkid.StateManager": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "cloudkid.BaseState": {
            "name": "cloudkid.BaseState",
            "shortname": "cloudkid.BaseState",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/BaseState.js",
            "line": 8,
            "description": "Defines the base functionality for a state used by the state manager",
            "constructor0": ".",
            "params": [
                {
                    "name": "panel",
                    "description": "The panel to associate with this panel",
                    "type": "createjs.MovieClip|PIXI.DisplayObjectContainer"
                }
            ]
        },
        "cloudkid.StateEvent": {
            "name": "cloudkid.StateEvent",
            "shortname": "cloudkid.StateEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/StateEvent.js",
            "line": 3,
            "description": "A gamestate-related event",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "See flash.events.Event",
                    "type": "String"
                },
                {
                    "name": "currentState",
                    "description": "The currentState of the state manager",
                    "type": "cloudkid.BaseState"
                },
                {
                    "name": "visibleState",
                    "description": "The current state being transitioned or changing visibility, default to currentState",
                    "type": "cloudkid.BaseState"
                }
            ]
        },
        "cloudkid.StateManager": {
            "name": "cloudkid.StateManager",
            "shortname": "cloudkid.StateManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/StateManager.js",
            "line": 19,
            "description": "The State Manager used for manaing the different states of a game or site",
            "is_constructor": 1,
            "params": [
                {
                    "name": "transition",
                    "description": "The transition MovieClip to play between transitions",
                    "type": "createjs.MovieClip|PIXI.MovieClip|PIXI.Spine"
                },
                {
                    "name": "audio",
                    "description": "Data object with aliases and start times (seconds) for transition in, loop and out sounds: {in:{alias:\"myAlias\", start:0.2}}.\n\t\tThese objects are in the format for Animator or PixiAnimator from CloudKidAnimation, so they can be the alias instead of an object.",
                    "type": "Object"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "src/BaseState.js",
            "line": 22,
            "description": "Adds the specified event listener",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "An object with a handleEvent method, or a function that will be called when the event is dispatched",
                    "type": "Function|object"
                }
            ],
            "return": {
                "description": "Returns the listener for chaining or assignment",
                "type": "Function|object"
            },
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 30,
            "description": "Removes the specified event listener",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The listener function or object",
                    "type": "Function|object"
                }
            ],
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 37,
            "description": "Removes all listeners for the specified type, or all listeners of all types",
            "itemtype": "method",
            "name": "removeAllEventListeners",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event. If omitted, all listeners for all types will be removed.",
                    "type": "String"
                }
            ],
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 43,
            "description": "Dispatches the specified event",
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "enventObj",
                    "description": "An object with a \"type\" property, or a string type",
                    "type": "Object|String"
                },
                {
                    "name": "target",
                    "description": "The object to use as the target property of the event object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns true if any listener returned true",
                "type": "Bool"
            },
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 51,
            "description": "Indicates whether there is at least one listener for the specified event type",
            "itemtype": "method",
            "name": "hasEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if there is at least one listener for the specified event",
                "type": "Bool"
            },
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 58,
            "description": "Createjs EventDispatcher method",
            "itemtype": "property",
            "name": "_listeners description",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 68,
            "description": "The id reference",
            "itemtype": "property",
            "name": "stateID",
            "type": "String",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 75,
            "description": "A reference to the state manager",
            "itemtype": "property",
            "name": "manager",
            "type": "cloudkid.StateManager",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 82,
            "description": "Save the panel",
            "itemtype": "property",
            "name": "panel",
            "type": "createjs.MovieClip|PIXI.DisplayObjectContainer",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 89,
            "description": "Check to see if we've been destroyed",
            "itemtype": "property",
            "name": "_destroyed",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 97,
            "description": "If the manager considers this the active panel",
            "itemtype": "property",
            "name": "_active",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 105,
            "description": "If we are pre-loading the state",
            "itemtype": "property",
            "name": "_isLoading",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 113,
            "description": "If we canceled entering the state",
            "itemtype": "property",
            "name": "_canceled",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 121,
            "description": "When we're finishing loading",
            "itemtype": "property",
            "name": "_onEnterStateProceed",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 129,
            "itemtype": "property",
            "name": "_onLoadingComplete",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 136,
            "itemtype": "property",
            "name": "_enabled",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 143,
            "description": "If we are currently transitioning",
            "itemtype": "property",
            "name": "isTransitioning",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 151,
            "description": "Initialize the Base State",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "panel",
                    "description": "The panel",
                    "type": "createjs.MovieClip|PIXI.DisplayObjectContaner"
                }
            ],
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 161,
            "description": "Status of whether the panel load was canceled",
            "itemtype": "method",
            "name": "getCanceled",
            "return": {
                "description": "If the load was canceled",
                "type": "Bool"
            },
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 172,
            "description": "This is called by the State Manager to exit the state",
            "itemtype": "method",
            "name": "_internalExitState",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 193,
            "description": "When the state is exited",
            "itemtype": "method",
            "name": "exitState",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 200,
            "description": "Exit the state start, called by the State Manager",
            "itemtype": "method",
            "name": "_internalExitStateStart",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 211,
            "description": "When the state has requested to be exit, pre-transition",
            "itemtype": "method",
            "name": "exitStateStart",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 218,
            "description": "Exit the state start, called by the State Manager",
            "itemtype": "method",
            "name": "_internalEnterState",
            "params": [
                {
                    "name": "proceed",
                    "description": "The function to call after enterState has been called",
                    "type": "Functon"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 249,
            "description": "Internal function to start the preloading",
            "itemtype": "method",
            "name": "loadingStart",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 274,
            "description": "Internal function to finish the preloading",
            "itemtype": "method",
            "name": "loadingDone",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 297,
            "description": "Cancel the loading of this state",
            "itemtype": "method",
            "name": "_internalCancel",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 313,
            "description": "Cancel the load, implementation-specific\nthis is where any async actions are removed",
            "itemtype": "method",
            "name": "cancel",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 321,
            "description": "When the state is entered",
            "itemtype": "method",
            "name": "enterState",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 328,
            "description": "Exit the state start, called by the State Manager",
            "itemtype": "method",
            "name": "_internalEnterStateDone",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 342,
            "description": "When the state is visually entered fully\nthat is, after the transition is done",
            "itemtype": "method",
            "name": "enterStateDone",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 350,
            "description": "StateManager updates the state",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "elasped",
                    "description": "The second since the last frame",
                    "type": "Int"
                }
            ],
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 358,
            "description": "Get if this is the active state",
            "itemtype": "method",
            "name": "getActive",
            "return": {
                "description": "If this is the active state",
                "type": "Bool"
            },
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 369,
            "description": "Transition the panel in",
            "itemtype": "method",
            "name": "transitionIn",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 394,
            "description": "Transition the panel out",
            "itemtype": "method",
            "name": "transitionOut",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 420,
            "description": "Get if this State has been destroyed",
            "itemtype": "method",
            "name": "getDestroyed",
            "return": {
                "description": "If this has been destroyed",
                "type": "Bool"
            },
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 431,
            "description": "Enable this panel, true is only non-loading and non-transitioning state",
            "itemtype": "method",
            "name": "setEnabled",
            "params": [
                {
                    "name": "enabled",
                    "description": "The enabled state",
                    "type": "Bool"
                }
            ],
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 442,
            "description": "Get the enabled status",
            "itemtype": "method",
            "name": "getEnabled",
            "return": {
                "description": "If this state is enabled",
                "type": "Bool"
            },
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/BaseState.js",
            "line": 453,
            "description": "Don't use the state object after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "cloudkid.BaseState"
        },
        {
            "file": "src/StateEvent.js",
            "line": 19,
            "description": "The name of the event for when the state starts transitioning in",
            "itemtype": "event",
            "name": "onTransitionStateIn",
            "class": "cloudkid.StateEvent"
        },
        {
            "file": "src/StateEvent.js",
            "line": 26,
            "description": "The name of the event for when the state finishes transition in",
            "itemtype": "event",
            "name": "onTransitionStateInDone",
            "type": "String",
            "class": "cloudkid.StateEvent"
        },
        {
            "file": "src/StateEvent.js",
            "line": 33,
            "description": "The name of the event for when the state starts transitioning out",
            "itemtype": "event",
            "name": "onTransitionStateOut",
            "type": "String",
            "class": "cloudkid.StateEvent"
        },
        {
            "file": "src/StateEvent.js",
            "line": 40,
            "description": "The name of the event for when the state is done transitioning out",
            "itemtype": "event",
            "name": "onTransitionStateOutDone",
            "type": "String",
            "class": "cloudkid.StateEvent"
        },
        {
            "file": "src/StateEvent.js",
            "line": 47,
            "description": "When the state besome visible",
            "itemtype": "event",
            "name": "onVisible",
            "type": "String",
            "class": "cloudkid.StateEvent"
        },
        {
            "file": "src/StateEvent.js",
            "line": 54,
            "description": "When the state becomes hidden",
            "itemtype": "event",
            "name": "onHidden",
            "type": "String",
            "class": "cloudkid.StateEvent"
        },
        {
            "file": "src/StateEvent.js",
            "line": 61,
            "description": "A reference to the current state of the state manager",
            "itemtype": "property",
            "name": "currentState",
            "type": "cloudkid.BaseState",
            "class": "cloudkid.StateEvent"
        },
        {
            "file": "src/StateEvent.js",
            "line": 68,
            "description": "A reference to the state who's actually being transitioned or being changed",
            "itemtype": "property",
            "name": "visibleState",
            "type": "cloudkid.BaseState",
            "class": "cloudkid.StateEvent"
        },
        {
            "file": "src/StateEvent.js",
            "line": 75,
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "cloudkid.StateEvent"
        },
        {
            "file": "src/StateEvent.js",
            "line": 81,
            "description": "Initialize the event",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event",
                    "type": "String"
                },
                {
                    "name": "currentState",
                    "description": "The currentState of the state manager",
                    "type": "cloudkid.BaseState"
                },
                {
                    "name": "visibleState",
                    "description": "The current state being transitioned or changing visibility",
                    "type": "cloudkid.BaseState"
                }
            ],
            "class": "cloudkid.StateEvent"
        },
        {
            "file": "src/StateManager.js",
            "line": 36,
            "description": "Adds the specified event listener",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "An object with a handleEvent method, or a function that will be called when the event is dispatched",
                    "type": "Function|object"
                }
            ],
            "return": {
                "description": "Returns the listener for chaining or assignment",
                "type": "Function|object"
            },
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 44,
            "description": "Removes the specified event listener",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The listener function or object",
                    "type": "Function|object"
                }
            ],
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 51,
            "description": "Removes all listeners for the specified type, or all listeners of all types",
            "itemtype": "method",
            "name": "removeAllEventListeners",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event. If omitted, all listeners for all types will be removed.",
                    "type": "String"
                }
            ],
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 57,
            "description": "Dispatches the specified event",
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "enventObj",
                    "description": "An object with a \"type\" property, or a string type",
                    "type": "Object|String"
                },
                {
                    "name": "target",
                    "description": "The object to use as the target property of the event object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns true if any listener returned true",
                "type": "Bool"
            },
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 65,
            "description": "Indicates whether there is at least one listener for the specified event type",
            "itemtype": "method",
            "name": "hasEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if there is at least one listener for the specified event",
                "type": "Bool"
            },
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 72,
            "description": "Createjs EventDispatcher method",
            "itemtype": "property",
            "name": "_listeners description",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 82,
            "description": "The current version of the state manager",
            "itemtype": "property",
            "name": "VERSION",
            "type": "String",
            "static": 1,
            "final": 1,
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 91,
            "description": "The click to play in between transitioning states",
            "itemtype": "property",
            "name": "_transition",
            "type": "createjs.MovieClip",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 99,
            "description": "The sounds for the transition",
            "itemtype": "property",
            "name": "_transitionSounds",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 107,
            "description": "The collection of states map",
            "itemtype": "property",
            "name": "_states",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 115,
            "description": "The currently selected state",
            "itemtype": "property",
            "name": "_state",
            "type": "cloudkid.BaseState",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 123,
            "description": "The currently selected state id",
            "itemtype": "property",
            "name": "_stateID",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 131,
            "description": "The old state",
            "itemtype": "property",
            "name": "_oldState",
            "type": "cloudkid.BaseState",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 139,
            "description": "If the manager is loading a state",
            "itemtype": "property",
            "name": "name description",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 147,
            "description": "If the state or manager is current transitioning",
            "itemtype": "property",
            "name": "_isTransitioning",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 155,
            "description": "If the current object is destroyed",
            "itemtype": "property",
            "name": "_destroyed",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 163,
            "description": "If we're transitioning the state, the queue the id of the next one",
            "itemtype": "property",
            "name": "_queueStateId",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 171,
            "description": "The name of the Animator label and event for transitioning state in",
            "itemtype": "event",
            "name": "onTransitionIn",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 178,
            "description": "The name of the event for done with transitioning state in",
            "itemtype": "event",
            "name": "onTransitionInDone",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 185,
            "description": "The name of the Animator label and event for transitioning state out",
            "itemtype": "event",
            "name": "onTransitionOut",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 192,
            "description": "The name of the event for done with transitioning state out",
            "itemtype": "event",
            "name": "onTransitionOutDone",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 199,
            "description": "The name of the Animator label for showing the blocker",
            "itemtype": "event",
            "name": "onBlockerShow",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 206,
            "description": "The name of the Animator label for showing the blocker",
            "itemtype": "event",
            "name": "onBlockerShowDone",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 213,
            "description": "The name of the Animator label and event for hiding the blocker",
            "itemtype": "event",
            "name": "onBlockerHide",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 220,
            "description": "The name of the Animator label and event for hiding the blocker",
            "itemtype": "event",
            "name": "onBlockerHideDone",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 227,
            "description": "The name of the Animator label and event for initializing",
            "itemtype": "event",
            "name": "onInit",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 234,
            "description": "The name of the event for done with initializing",
            "itemtype": "event",
            "name": "onInitDone",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 241,
            "description": "Event when the state transitions the first time",
            "itemtype": "event",
            "name": "onLoadingStart",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 248,
            "description": "Event when the state transitions the first time",
            "itemtype": "event",
            "name": "onLoadingDone",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 255,
            "description": "Initialize the State Manager",
            "itemtype": "method",
            "name": "intialize",
            "params": [
                {
                    "name": "transition",
                    "description": "The transition MovieClip to play between transitions",
                    "type": "createjs.MovieClip|PIXI.MovieClip|PIXI.Spine"
                },
                {
                    "name": "transitionSounds",
                    "description": "Data object with aliases and start times (seconds) for transition in, loop and out sounds: {in:{alias:\"myAlias\", start:0.2}}",
                    "type": "Object"
                }
            ],
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 284,
            "description": "Register a state with the state manager, done initially",
            "itemtype": "method",
            "name": "addState",
            "params": [
                {
                    "name": "id",
                    "description": "The string alias for a state",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "State object reference",
                    "type": "cloudkid.BaseState"
                }
            ],
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 311,
            "description": "Dynamically change the transition",
            "itemtype": "method",
            "name": "changeTransition",
            "params": [
                {
                    "name": "Clip",
                    "description": "to swap for transition",
                    "type": "createjs.MovieClip|PIXI.MovieClip|PIXI.Spine"
                }
            ],
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 326,
            "description": "Get the currently selected state",
            "itemtype": "method",
            "name": "getState",
            "return": {
                "description": "The id of the current state",
                "type": "String"
            },
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 337,
            "description": "Get the current selected state (state object)",
            "itemtype": "method",
            "name": "getCurrentState",
            "return": {
                "description": "The Base State object",
                "type": "cloudkid.BaseState"
            },
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 348,
            "description": "Access a certain state by the ID",
            "itemtype": "method",
            "name": "getStateById",
            "params": [
                {
                    "name": "id",
                    "description": "State alias",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The base State object",
                "type": "cloudkid.BaseState"
            },
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 361,
            "description": "If the StateManager is busy because it is currently loading or transitioning.",
            "itemtype": "method",
            "name": "isBusy",
            "return": {
                "description": "If StateManager is busy",
                "type": "Bool"
            },
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 372,
            "description": "If the state needs to do some asyncronous tasks,\nThe state can tell the manager to stop the animation",
            "itemtype": "method",
            "name": "loadingStart",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 391,
            "description": "If the state has finished it's asyncronous task loading\nLets enter the state",
            "itemtype": "method",
            "name": "loadingDone",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 405,
            "description": "Show, enable the blocker clip to disable mouse clicks",
            "itemtype": "method",
            "name": "showBlocker",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 430,
            "description": "Re-enable interaction with the stage",
            "itemtype": "method",
            "name": "hideBlocker",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 451,
            "description": "This transitions out of the current state and \nenters it again. Can be useful for clearing a state",
            "itemtype": "method",
            "name": "refresh",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 463,
            "description": "Set the current State",
            "itemtype": "method",
            "name": "setState",
            "params": [
                {
                    "name": "id",
                    "description": "The state id",
                    "type": "String"
                }
            ],
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 551,
            "description": "When the state has completed it's loading sequence\nthis should be treated as an asyncronous process",
            "itemtype": "method",
            "name": "_onStateLoaded",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 592,
            "description": "Process the state queue",
            "itemtype": "method",
            "name": "_processQueue",
            "return": {
                "description": "If there is a queue to process"
            },
            "access": "private",
            "tagname": "",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 614,
            "description": "Plays the animation \"transitionLoop\" on the transition. Also serves as the animation callback.\nManually looping the animation allows the animation to be synced to the audio while looping.",
            "itemtype": "method",
            "name": "_loopTransition",
            "access": "private",
            "tagname": "",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 652,
            "description": "Displays the transition out animation, without changing states.",
            "itemtype": "method",
            "name": "showTransitionOut",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when the animation is complete.",
                    "type": "Function"
                }
            ],
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 672,
            "description": "Displays the transition in animation, without changing states.",
            "itemtype": "method",
            "name": "showTransitionIn",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when the animation is complete.",
                    "type": "Function"
                }
            ],
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 684,
            "description": "Generalized function for transitioning with the manager",
            "itemtype": "method",
            "name": "_transitioning",
            "params": [
                {
                    "name": "The",
                    "description": "animator event to play",
                    "type": "String"
                },
                {
                    "name": "The",
                    "description": "callback function after transition is done",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 721,
            "description": "The frame update function",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "elasped",
                    "description": "The ms since the last frame",
                    "type": "Int"
                }
            ],
            "class": "cloudkid.StateManager"
        },
        {
            "file": "src/StateManager.js",
            "line": 735,
            "description": "Remove the state manager",
            "itemtype": "method",
            "name": "destroy",
            "class": "cloudkid.StateManager"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: constructor0",
            "line": " src/BaseState.js:8"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:22"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:30"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:37"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:43"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:51"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:151"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:161"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:172"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:193"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:200"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:211"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:218"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:249"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:274"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:297"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:313"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:321"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:328"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:342"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:350"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:358"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:369"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:394"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:420"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:431"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:442"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:453"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateEvent.js:81"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:36"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:44"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:51"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:57"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:65"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:255"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:284"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:311"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:326"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:337"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:348"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:361"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:372"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:391"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:405"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:430"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:451"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:463"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:551"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:592"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:614"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:652"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:672"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:684"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:721"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:735"
        }
    ]
}