{
    "project": {
        "name": "CloudKid States API",
        "description": "CloudKid States API: a library providing base classes for making various gamestates",
        "version": "1.1.2",
        "logo": ""
    },
    "files": {
        "src/BaseState.js": {
            "name": "src/BaseState.js",
            "modules": {
                "cloudkid": 1
            },
            "classes": {
                "BaseState": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/StateEvent.js": {
            "name": "src/StateEvent.js",
            "modules": {},
            "classes": {
                "StateEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/StateManager.js": {
            "name": "src/StateManager.js",
            "modules": {},
            "classes": {
                "StateManager": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "cloudkid": {
            "name": "cloudkid",
            "submodules": {},
            "classes": {
                "BaseState": 1,
                "StateEvent": 1,
                "StateManager": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/StateManager.js",
            "line": 21,
            "description": "Defines the base functionality for a state used by the state manager",
            "is_constructor": 1,
            "params": [
                {
                    "name": "panel",
                    "description": "The panel to associate with this panel",
                    "type": "createjs.MovieClip|PIXI.DisplayObjectContainer"
                }
            ]
        }
    },
    "classes": {
        "BaseState": {
            "name": "BaseState",
            "shortname": "BaseState",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/BaseState.js",
            "line": 10,
            "description": "Defines the base functionality for a state used by the state manager"
        },
        "StateEvent": {
            "name": "StateEvent",
            "shortname": "StateEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/StateEvent.js",
            "line": 5,
            "description": "A state-related event used by the State Manager"
        },
        "StateManager": {
            "name": "StateManager",
            "shortname": "StateManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/StateManager.js",
            "line": 21,
            "description": "The State Manager used for manaing the different states of a game or site"
        }
    },
    "classitems": [
        {
            "file": "src/BaseState.js",
            "line": 25,
            "description": "Adds the specified event listener",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "An object with a handleEvent method, or a function that will be called when the event is dispatched",
                    "type": "Function|object"
                }
            ],
            "return": {
                "description": "Returns the listener for chaining or assignment",
                "type": "Function|object"
            },
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 34,
            "description": "Removes the specified event listener",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The listener function or object",
                    "type": "Function|object"
                }
            ],
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 42,
            "description": "Removes all listeners for the specified type, or all listeners of all types",
            "itemtype": "method",
            "name": "removeAllEventListeners",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event. If omitted, all listeners for all types will be removed.",
                    "type": "String"
                }
            ],
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 49,
            "description": "Dispatches the specified event",
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "enventObj",
                    "description": "An object with a \"type\" property, or a string type",
                    "type": "Object|String"
                },
                {
                    "name": "target",
                    "description": "The object to use as the target property of the event object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns true if any listener returned true",
                "type": "Bool"
            },
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 58,
            "description": "Indicates whether there is at least one listener for the specified event type",
            "itemtype": "method",
            "name": "hasEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if there is at least one listener for the specified event",
                "type": "Bool"
            },
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 66,
            "description": "Createjs EventDispatcher method",
            "itemtype": "property",
            "name": "_listeners description",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 76,
            "description": "The id reference",
            "itemtype": "property",
            "name": "stateID",
            "type": "String",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 83,
            "description": "A reference to the state manager",
            "itemtype": "property",
            "name": "manager",
            "type": "StateManager",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 90,
            "description": "Save the panel",
            "itemtype": "property",
            "name": "panel",
            "type": "createjs.MovieClip|PIXI.DisplayObjectContainer",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 97,
            "description": "Check to see if we've been destroyed",
            "itemtype": "property",
            "name": "_destroyed",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 105,
            "description": "If the manager considers this the active panel",
            "itemtype": "property",
            "name": "_active",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 113,
            "description": "If we are pre-loading the state",
            "itemtype": "property",
            "name": "_isLoading",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 121,
            "description": "If we canceled entering the state",
            "itemtype": "property",
            "name": "_canceled",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 129,
            "description": "When we're finishing loading",
            "itemtype": "property",
            "name": "_onEnterStateProceed",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 137,
            "itemtype": "property",
            "name": "_onLoadingComplete",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 144,
            "itemtype": "property",
            "name": "_enabled",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 151,
            "description": "If we are currently transitioning",
            "itemtype": "property",
            "name": "isTransitioning",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 159,
            "description": "Initialize the Base State",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "panel",
                    "description": "The panel",
                    "type": "createjs.MovieClip|PIXI.DisplayObjectContaner"
                }
            ],
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 169,
            "description": "Status of whether the panel load was canceled",
            "itemtype": "method",
            "name": "getCanceled",
            "return": {
                "description": "If the load was canceled",
                "type": "Bool"
            },
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 180,
            "description": "This is called by the State Manager to exit the state",
            "itemtype": "method",
            "name": "_internalExitState",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 201,
            "description": "When the state is exited",
            "itemtype": "method",
            "name": "exitState",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 208,
            "description": "Exit the state start, called by the State Manager",
            "itemtype": "method",
            "name": "_internalExitStateStart",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 219,
            "description": "When the state has requested to be exit, pre-transition",
            "itemtype": "method",
            "name": "exitStateStart",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 226,
            "description": "Exit the state start, called by the State Manager",
            "itemtype": "method",
            "name": "_internalEnterState",
            "params": [
                {
                    "name": "proceed",
                    "description": "The function to call after enterState has been called",
                    "type": "Functon"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 257,
            "description": "Internal function to start the preloading",
            "itemtype": "method",
            "name": "loadingStart",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 282,
            "description": "Internal function to finish the preloading",
            "itemtype": "method",
            "name": "loadingDone",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 305,
            "description": "Cancel the loading of this state",
            "itemtype": "method",
            "name": "_internalCancel",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 321,
            "description": "Cancel the load, implementation-specific\nthis is where any async actions are removed",
            "itemtype": "method",
            "name": "cancel",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 329,
            "description": "When the state is entered",
            "itemtype": "method",
            "name": "enterState",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 336,
            "description": "Exit the state start, called by the State Manager",
            "itemtype": "method",
            "name": "_internalEnterStateDone",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 350,
            "description": "When the state is visually entered fully\nthat is, after the transition is done",
            "itemtype": "method",
            "name": "enterStateDone",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 358,
            "description": "StateManager updates the state",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "elasped",
                    "description": "The second since the last frame",
                    "type": "Int"
                }
            ],
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 366,
            "description": "Get if this is the active state",
            "itemtype": "method",
            "name": "getActive",
            "return": {
                "description": "If this is the active state",
                "type": "Bool"
            },
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 377,
            "description": "Transition the panel in",
            "itemtype": "method",
            "name": "transitionIn",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 402,
            "description": "Transition the panel out",
            "itemtype": "method",
            "name": "transitionOut",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 428,
            "description": "Get if this State has been destroyed",
            "itemtype": "method",
            "name": "getDestroyed",
            "return": {
                "description": "If this has been destroyed",
                "type": "Bool"
            },
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 439,
            "description": "Enable this panel, true is only non-loading and non-transitioning state",
            "itemtype": "method",
            "name": "setEnabled",
            "params": [
                {
                    "name": "enabled",
                    "description": "The enabled state",
                    "type": "Bool"
                }
            ],
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 450,
            "description": "Get the enabled status",
            "itemtype": "method",
            "name": "getEnabled",
            "return": {
                "description": "If this state is enabled",
                "type": "Bool"
            },
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/BaseState.js",
            "line": 461,
            "description": "Don't use the state object after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/StateEvent.js",
            "line": 22,
            "description": "The name of the event for when the state starts transitioning in",
            "itemtype": "event",
            "name": "onTransitionStateIn",
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/StateEvent.js",
            "line": 29,
            "description": "The name of the event for when the state finishes transition in",
            "itemtype": "event",
            "name": "onTransitionStateInDone",
            "type": "String",
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/StateEvent.js",
            "line": 36,
            "description": "The name of the event for when the state starts transitioning out",
            "itemtype": "event",
            "name": "onTransitionStateOut",
            "type": "String",
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/StateEvent.js",
            "line": 43,
            "description": "The name of the event for when the state is done transitioning out",
            "itemtype": "event",
            "name": "onTransitionStateOutDone",
            "type": "String",
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/StateEvent.js",
            "line": 50,
            "description": "When the state besome visible",
            "itemtype": "event",
            "name": "onVisible",
            "type": "String",
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/StateEvent.js",
            "line": 57,
            "description": "When the state becomes hidden",
            "itemtype": "event",
            "name": "onHidden",
            "type": "String",
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/StateEvent.js",
            "line": 64,
            "description": "A reference to the current state of the state manager",
            "itemtype": "property",
            "name": "currentState",
            "type": "BaseState",
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/StateEvent.js",
            "line": 71,
            "description": "A reference to the state who's actually being transitioned or being changed",
            "itemtype": "property",
            "name": "visibleState",
            "type": "BaseState",
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/StateEvent.js",
            "line": 78,
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/StateEvent.js",
            "line": 84,
            "description": "Initialize the event",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event",
                    "type": "String"
                },
                {
                    "name": "currentState",
                    "description": "The currentState of the state manager",
                    "type": "BaseState"
                },
                {
                    "name": "visibleState",
                    "description": "The current state being transitioned or changing visibility",
                    "type": "BaseState"
                }
            ],
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 39,
            "description": "Adds the specified event listener",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "An object with a handleEvent method, or a function that will be called when the event is dispatched",
                    "type": "Function|object"
                }
            ],
            "return": {
                "description": "Returns the listener for chaining or assignment",
                "type": "Function|object"
            },
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 48,
            "description": "Removes the specified event listener",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The listener function or object",
                    "type": "Function|object"
                }
            ],
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 56,
            "description": "Removes all listeners for the specified type, or all listeners of all types",
            "itemtype": "method",
            "name": "removeAllEventListeners",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event. If omitted, all listeners for all types will be removed.",
                    "type": "String"
                }
            ],
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 63,
            "description": "Dispatches the specified event",
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "enventObj",
                    "description": "An object with a \"type\" property, or a string type",
                    "type": "Object|String"
                },
                {
                    "name": "target",
                    "description": "The object to use as the target property of the event object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns true if any listener returned true",
                "type": "Bool"
            },
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 72,
            "description": "Indicates whether there is at least one listener for the specified event type",
            "itemtype": "method",
            "name": "hasEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if there is at least one listener for the specified event",
                "type": "Bool"
            },
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 80,
            "description": "Createjs EventDispatcher method",
            "itemtype": "property",
            "name": "_listeners description",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 90,
            "description": "The current version of the state manager",
            "itemtype": "property",
            "name": "VERSION",
            "type": "String",
            "static": 1,
            "final": 1,
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 99,
            "description": "The click to play in between transitioning states",
            "itemtype": "property",
            "name": "_transition",
            "type": "createjs.MovieClip",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 107,
            "description": "The sounds for the transition",
            "itemtype": "property",
            "name": "_transitionSounds",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 115,
            "description": "The collection of states map",
            "itemtype": "property",
            "name": "_states",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 123,
            "description": "The currently selected state",
            "itemtype": "property",
            "name": "_state",
            "type": "BaseState",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 131,
            "description": "The currently selected state id",
            "itemtype": "property",
            "name": "_stateID",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 139,
            "description": "The old state",
            "itemtype": "property",
            "name": "_oldState",
            "type": "BaseState",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 147,
            "description": "If the manager is loading a state",
            "itemtype": "property",
            "name": "name description",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 155,
            "description": "If the state or manager is current transitioning",
            "itemtype": "property",
            "name": "_isTransitioning",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 163,
            "description": "If the current object is destroyed",
            "itemtype": "property",
            "name": "_destroyed",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 171,
            "description": "If we're transitioning the state, the queue the id of the next one",
            "itemtype": "property",
            "name": "_queueStateId",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 179,
            "description": "The name of the Animator label and event for transitioning state in",
            "itemtype": "event",
            "name": "onTransitionIn",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 186,
            "description": "The name of the event for done with transitioning state in",
            "itemtype": "event",
            "name": "onTransitionInDone",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 193,
            "description": "The name of the Animator label and event for transitioning state out",
            "itemtype": "event",
            "name": "onTransitionOut",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 200,
            "description": "The name of the event for done with transitioning state out",
            "itemtype": "event",
            "name": "onTransitionOutDone",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 207,
            "description": "The name of the Animator label for showing the blocker",
            "itemtype": "event",
            "name": "onBlockerShow",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 214,
            "description": "The name of the Animator label for showing the blocker",
            "itemtype": "event",
            "name": "onBlockerShowDone",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 221,
            "description": "The name of the Animator label and event for hiding the blocker",
            "itemtype": "event",
            "name": "onBlockerHide",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 228,
            "description": "The name of the Animator label and event for hiding the blocker",
            "itemtype": "event",
            "name": "onBlockerHideDone",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 235,
            "description": "The name of the Animator label and event for initializing",
            "itemtype": "event",
            "name": "onInit",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 242,
            "description": "The name of the event for done with initializing",
            "itemtype": "event",
            "name": "onInitDone",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 249,
            "description": "Event when the state transitions the first time",
            "itemtype": "event",
            "name": "onLoadingStart",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 256,
            "description": "Event when the state transitions the first time",
            "itemtype": "event",
            "name": "onLoadingDone",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 263,
            "description": "Initialize the State Manager",
            "itemtype": "method",
            "name": "intialize",
            "params": [
                {
                    "name": "transition",
                    "description": "The transition MovieClip to play between transitions",
                    "type": "createjs.MovieClip|PIXI.MovieClip|PIXI.Spine"
                },
                {
                    "name": "transitionSounds",
                    "description": "Data object with aliases and start times (seconds) for transition in, loop and out sounds: {in:{alias:\"myAlias\", start:0.2}}",
                    "type": "Object"
                }
            ],
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 292,
            "description": "Register a state with the state manager, done initially",
            "itemtype": "method",
            "name": "addState",
            "params": [
                {
                    "name": "id",
                    "description": "The string alias for a state",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "State object reference",
                    "type": "BaseState"
                }
            ],
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 319,
            "description": "Dynamically change the transition",
            "itemtype": "method",
            "name": "changeTransition",
            "params": [
                {
                    "name": "Clip",
                    "description": "to swap for transition",
                    "type": "createjs.MovieClip|PIXI.MovieClip|PIXI.Spine"
                }
            ],
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 334,
            "description": "Get the currently selected state",
            "itemtype": "method",
            "name": "getState",
            "return": {
                "description": "The id of the current state",
                "type": "String"
            },
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 345,
            "description": "Get the current selected state (state object)",
            "itemtype": "method",
            "name": "getCurrentState",
            "return": {
                "description": "The Base State object",
                "type": "BaseState"
            },
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 356,
            "description": "Access a certain state by the ID",
            "itemtype": "method",
            "name": "getStateById",
            "params": [
                {
                    "name": "id",
                    "description": "State alias",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The base State object",
                "type": "BaseState"
            },
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 369,
            "description": "If the StateManager is busy because it is currently loading or transitioning.",
            "itemtype": "method",
            "name": "isBusy",
            "return": {
                "description": "If StateManager is busy",
                "type": "Bool"
            },
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 380,
            "description": "If the state needs to do some asyncronous tasks,\nThe state can tell the manager to stop the animation",
            "itemtype": "method",
            "name": "loadingStart",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 399,
            "description": "If the state has finished it's asyncronous task loading\nLets enter the state",
            "itemtype": "method",
            "name": "loadingDone",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 413,
            "description": "Show, enable the blocker clip to disable mouse clicks",
            "itemtype": "method",
            "name": "showBlocker",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 438,
            "description": "Re-enable interaction with the stage",
            "itemtype": "method",
            "name": "hideBlocker",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 460,
            "description": "This transitions out of the current state and \nenters it again. Can be useful for clearing a state",
            "itemtype": "method",
            "name": "refresh",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 472,
            "description": "Set the current State",
            "itemtype": "method",
            "name": "setState",
            "params": [
                {
                    "name": "id",
                    "description": "The state id",
                    "type": "String"
                }
            ],
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 560,
            "description": "When the state has completed it's loading sequence\nthis should be treated as an asyncronous process",
            "itemtype": "method",
            "name": "_onStateLoaded",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 601,
            "description": "Process the state queue",
            "itemtype": "method",
            "name": "_processQueue",
            "return": {
                "description": "If there is a queue to process"
            },
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 623,
            "description": "Plays the animation \"transitionLoop\" on the transition. Also serves as the animation callback.\nManually looping the animation allows the animation to be synced to the audio while looping.",
            "itemtype": "method",
            "name": "_loopTransition",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 661,
            "description": "Displays the transition out animation, without changing states.",
            "itemtype": "method",
            "name": "showTransitionOut",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when the animation is complete.",
                    "type": "Function"
                }
            ],
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 681,
            "description": "Displays the transition in animation, without changing states.",
            "itemtype": "method",
            "name": "showTransitionIn",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when the animation is complete.",
                    "type": "Function"
                }
            ],
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 693,
            "description": "Generalized function for transitioning with the manager",
            "itemtype": "method",
            "name": "_transitioning",
            "params": [
                {
                    "name": "The",
                    "description": "animator event to play",
                    "type": "String"
                },
                {
                    "name": "The",
                    "description": "callback function after transition is done",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 730,
            "description": "The frame update function",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "elasped",
                    "description": "The ms since the last frame",
                    "type": "Int"
                }
            ],
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/StateManager.js",
            "line": 744,
            "description": "Remove the state manager",
            "itemtype": "method",
            "name": "destroy",
            "class": "StateManager",
            "module": "cloudkid"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:25"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:34"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:42"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:49"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:58"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:159"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:169"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:180"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:201"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:208"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:219"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:226"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:257"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:282"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:305"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:321"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:329"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:336"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:350"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:358"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:366"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:377"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:402"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:428"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:439"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:450"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/BaseState.js:461"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateEvent.js:84"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:39"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:48"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:56"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:63"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:72"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:263"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:292"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:319"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:334"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:345"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:356"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:369"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:380"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:399"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:413"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:438"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:460"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:472"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:560"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:601"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:623"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:661"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:681"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:693"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:730"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/StateManager.js:744"
        }
    ]
}